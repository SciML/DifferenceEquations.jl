var documenterSearchIndex = {"docs":
[{"location":"examples/quadratic_state_space_examples/#Quadratic-State-Space-Examples","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"","category":"section"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"Second-order state-space models here have pruning as in Andreasen, Fernandez-Villaverde, and Rubio-Ramirez (2017).","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"At this point, the package only supports linear time-invariant models without a separate p vector. The canonical form is","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"u_n+1 = A_0 + A_1 u_n + u_n^top A_2 u_n + B w_n+1","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"with","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"z_n = C_0 + C_1 u_n + u_n^top C_2 u_n +  v_n","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"and optionally v_n sim N(0 D) and w_n+1 sim N(0I). If you pass noise into the solver, it no longer needs to be Gaussian.","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"note: Note\nQuadratic state-space models do not have the full feature coverage as the linear models. In particular, the auto-differentiation rules are only currently implemented for the logpdf required for estimation, and the simulation doesn't have much flexibility on which model elements can be missing.","category":"page"},{"location":"examples/quadratic_state_space_examples/#Simulating-a-Quadratic-(and-Time-Invariant)-State-Space-Model","page":"Quadratic State Space Examples","title":"Simulating a Quadratic (and Time-Invariant) State Space Model","text":"","category":"section"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"Creating a QuadraticStateSpaceModel is similar to the Linear version described previously.","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"using DifferenceEquations, LinearAlgebra, Distributions, Random, Plots, DataFrames, Zygote, DiffEqBase\nA_0 =  [-7.824904812740593e-5, 0.0]\nA_1 = [0.95 6.2;\n     0.0  0.2]\nA_2 = cat([-0.0002 0.0334; 0.0 0.0],\n              [0.034 3.129; 0.0 0.0]; dims = 3)\nB = [0.0; 0.01;;] # matrix\nC_0 = [7.8e-5, 0.0]\nC_1 = [0.09 0.67;\n     1.00 0.00]\nC_2 = cat([-0.00019 0.0026; 0.0 0.0],\n    [0.0026 0.313; 0.0 0.0]; dims = 3)\nD = [0.01, 0.01] # diagonal observation noise\nu0 = zeros(2)\nT = 30\n\nprob = QuadraticStateSpaceProblem(A_0, A_1, A_2, B, u0, (0, T); C_0, C_1, C_2, observables_noise = D, syms = [:a, :b])\nsol = solve(prob)","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"As in the linear case, this model can be simulated and plotted","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"plot(sol)","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"And the observables and noise can be stored","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"observables = hcat(sol.z...)  # Observables required to be matrix.  Issue #55 \nobservables = observables[:, 2:end] # see note above on likelihood and timing\nnoise = sol.W","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"Ensembles work as well,","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"trajectories = 50\nu0_dist = MvNormal([1.0 0.1; 0.1 1.0])  # mean zero initial conditions\nprob = QuadraticStateSpaceProblem(A_0, A_1, A_2, B, u0_dist, (0, T); C_0, C_1, C_2, observables_noise = D, syms = [:a, :b])\nens_sol = solve(EnsembleProblem(prob), DirectIteration(), EnsembleThreads(); trajectories)\nsumm = EnsembleSummary(ens_sol)  # calculate summarize statistics such as quantiles\nplot(summ)","category":"page"},{"location":"examples/quadratic_state_space_examples/#Joint-Likelihood-with-Noise","page":"Quadratic State Space Examples","title":"Joint Likelihood with Noise","text":"","category":"section"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"To calculate the likelihood, the Kalman Filter is no longer applicable. However, we can still calculate the joint likelihood as we did in the linear examples. Using the simulated observables and noise,","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"function joint_likelihood_quad(A_0, A_1, A_2, B, C_0, C_1, C_2, D, u0, noise, observables)\n    prob = QuadraticStateSpaceProblem(A_0, A_1, A_2, B, u0, (0, size(observables,2)); C_0, C_1, C_2, observables, observables_noise = D, noise)\n    return solve(prob).logpdf\nend\nu0 = [0.0, 0.0]\njoint_likelihood_quad(A_0, A_1, A_2, B, C_0, C_1, C_2, D, u0, noise, observables)","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"Which, in turn, can itself be differentiated.","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"gradient((A_0, A_1, A_2, B, C_0, C_1, C_2, noise) -> joint_likelihood_quad(A_0, A_1, A_2, B, C_0, C_1, C_2, D, u0, noise, observables), A_0, A_1, A_2, B, C_0, C_1, C_2, noise)","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"Note that this is not only calculating the gradient of the likelihood with respect to the underlying canonical representations for the quadratic state space form, but also the entire noise vector.","category":"page"},{"location":"examples/quadratic_state_space_examples/","page":"Quadratic State Space Examples","title":"Quadratic State Space Examples","text":"As in the linear case, this likelihood calculation can be nested such that a separate differentiable function could generate the quadratic state space model, and the gradients could be over a smaller set of structural parameters.","category":"page"},{"location":"examples/general_state_space_examples/#General-State-Space-Examples","page":"General State Space Examples","title":"General State Space Examples","text":"","category":"section"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"note: Note\nThis is a placeholder for future support for general nonlinear state-space problems. The basic implementation is a relatively simple variation on the linear version, where you call back into AD for the f,g,h calls in the rrule definition. Because of the mixture of AD calls and rules, it may make sense to wait for Enzyme.jl to be ready.","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"A future feature, if anyone is interested in writing it, is full support for ","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"u_n+1 = f(u_npt_n) + g(u_npt_n) w_n+1","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"for some functions f and g, where w_n+1 are IID random shocks to the evolution equation. The p is a vector of potentially differentiable parameters.","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"In addition, there is an optional observation equation","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"z_n = h(u_n p t_n) +  v_n","category":"page"},{"location":"examples/general_state_space_examples/","page":"General State Space Examples","title":"General State Space Examples","text":"This could involve both the simulation and the calculation of the joint likelihood conditional on the noise, as in the other examples.","category":"page"},{"location":"#DifferenceEquations.jl","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl","text":"","category":"section"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"This package simulates for initial value problems for deterministic and stochastic difference equations, with or without a separate observation equation. In addition, the package provides likelihoods for some standard filters for estimating state-space models.","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"Relative to existing solvers, this package is intended to provide differentiable solvers and filters. For example, you can simulate a linear gaussian state space model and find the gradient of the solution with respect to the model primitives. Similarly, the likelihood for of Kalman Filter can itself be differentiated with respect to the underlying model primitives. This makes the package especially amenable to estimation and calibration, where the entire solution blocks become auto-differentiable.","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"note: Note\nBoundary value problems and difference-algebraic equations are not in scope. See DifferentiableStateSpaceModels.jl for experimental support for perturbation solutions and DSGEs.","category":"page"},{"location":"#Installation","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"Installation","text":"","category":"section"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"To install DifferenceEquations.jl, use the Julia package manager:","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"using Pkg\nPkg.add(\"DifferenceEquations\")","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"For additional functionality, you may want to add Plots, DiffEqBase. If you want to explore differentiable filters, you can install Zygote","category":"page"},{"location":"#Mathematical-Specification-of-a-Discrete-Problem","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"Mathematical Specification of a Discrete Problem","text":"","category":"section"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"For comparison, see the specifications of the deterministic Discrete Problem (albeit with a small difference in timing conventions) and the SDE Problem. Other introductions can be found by checking out DiffEqTutorials.jl.","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"The general class of problems intended to be supported in this package is to take an initial condition, u_0, and an evolution equation","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"u_n+1 = f(u_npt_n) + g(u_npt_n) w_n+1","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"for some functions f and g, and where w_n+1 are IID random shocks to the evolution equation. The p is a vector of potentially differentiable parameters.","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"In addition, there is an optional observation equation","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"z_n = h(u_n p t_n) +  v_n","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"where v_n is noisy observation error and the size of z_n may be different from u_n.","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"A few notes on the structure:","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"Frequently, the g provides the covariance structure, so a reasonable default is w_n+1 sim N(0I), and v_n sim N(0 D) is a common observation error for some covariance matrix D.\nIf fgh are all linear, the shocks are both gaussian, and the prior on the latent space is gaussian, then this is a linear gaussian state-space model. Kalman filters can be used to calculate marginal likelihoods, and simulations can be executed with very little overhead.\nt_n is the current time at which the map is applied, where t_n = t_0 + n*dt (with dt=1 being the default).\nIf f g h are not functions of time, then it is a time-invariant state-space model.","category":"page"},{"location":"#Likelihood-and-Filtering-Calculations","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"Likelihood and Filtering Calculations","text":"","category":"section"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"Certain solve algorithms will run a filter on the unobservable u states and compare to the observables if provided. In that case, it might do so (1) with unobservable w_n noise; or (2) conditioning on a particular sequence of w_n+1 shocks, where the likelihood depends on the unknown observational error v_n.","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"If an algorithm is given for the filtering, then the return type of solve will have access to a logpdf for the log likelihood. In addition, the solution will provide information on the sequence of posteriors (and smoothed values, if required).","category":"page"},{"location":"#Joint-Likelihood","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"Joint Likelihood","text":"","category":"section"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"In the case of a joint-likelihood where the noise (i.e. w_n) is given, it is not a hidden markov model and the log likelihood simply accumulates the likelihood of each observation. The timing is such that given a u_0 which is fixed (and often added to the likelihood separately), and observables z equiv z_1 ldots z_N and noise w equiv w_1 ldots w_N then,","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"mathcalL(z u_0 w) = sum_n=1^N log Pleft(v_n t_n w_nright) ","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"where","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"v_n = z_n - h(u_n p t_n)\nu_n+1 = f(u_npt_n) + g(u_npt_n) w_n+1","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"The density, P, is in the case of the typical Gaussian errors, it would be","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"z_n - h(u_n p t_n) sim N(0 D)  = P","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"Ultimately, IID Gaussian observation noise is not required, and though the package currently only supports gaussian observation noise with a diagonal covariance matrix, it could be adapted without significant changes.","category":"page"},{"location":"#Linear-Filtering-for-the-Marginal-Likelihood","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"Linear Filtering for the Marginal Likelihood","text":"","category":"section"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"When the system is linear and the prior is gaussian, there is an exact likelihood for the marginal likelihood using the Kalman Filter. Unlike the previous example, this is a marginal likelihood and not conditional on the noise, w. See the Kalman Filter Likelihood for more details.","category":"page"},{"location":"#Current-Status","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"Current Status","text":"","category":"section"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"At this point, the package does not cover all the variations on these features. In particular,","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"It only supports linear and quadratic f g h functions. General fg simulation are relatively easy to add, but full SciML compliance would require experience with those APIs. The custom rrule for those is also a straightforward variation on the existing linear version.\nIt only supports time-invariant functions.\nThere is limited support for non-Gaussian w_n and v_n processes.\nIt does not support linear or quadratic functions parameterized by the p vector for differentiation.\nThere are some hard-coded types that prevent it from working with fully generic arrays.\nIt does not support in-place vs. out-of-place, nor support static arrays, nor matrix-free linear operators.\nWhile many functions in the SciML framework are working, support is incomplete.\nThere is no complete coverage of gradients for the solution for all parameter inputs/etc.\nThe package does not support non-gaussian observation noise and is inconsistent with SciML noise process data structures.\nMany cleanup steps are necessary for full SciML compliance (e.g., enable passing in vectors-of-vectors or noise/observations, standard SciML dispatching).","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"To help contribute to filling in these features, see the issues.","category":"page"},{"location":"#Contributing","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"Contributing","text":"","category":"section"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"Please refer to the SciML ColPrac: Contributor's Guide on Collaborative Practices for Community Packages for guidance on PRs, issues, and other matters relating to contributing to SciML.\nSee the SciML Style Guide for common coding practices and other style decisions.\nThere are a few community forums:\nThe #diffeq-bridged and #sciml-bridged channels in the Julia Slack\nThe #diffeq-bridged and #sciml-bridged channels in the Julia Zulip\nOn the Julia Discourse forums\nSee also SciML Community page","category":"page"},{"location":"#Reproducibility","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"Reproducibility","text":"","category":"section"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"<details><summary>The documentation of this SciML package was built using these direct dependencies,</summary>","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"using Pkg # hide\nPkg.status() # hide","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"</details>","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"<details><summary>and using this machine and Julia version.</summary>","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"using InteractiveUtils # hide\nversioninfo() # hide","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"</details>","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"<details><summary>A more complete overview of all dependencies and their versions is also provided.</summary>","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"using Pkg # hide\nPkg.status(; mode = PKGMODE_MANIFEST) # hide","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"</details>","category":"page"},{"location":"","page":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","title":"DifferenceEquations.jl: Discrete-Time State Space Solution Methods","text":"using TOML\nusing Markdown\nversion = TOML.parse(read(\"../../Project.toml\", String))[\"version\"]\nname = TOML.parse(read(\"../../Project.toml\", String))[\"name\"]\nlink_manifest = \"https://github.com/SciML/\" * name * \".jl/tree/gh-pages/v\" * version *\n                \"/assets/Manifest.toml\"\nlink_project = \"https://github.com/SciML/\" * name * \".jl/tree/gh-pages/v\" * version *\n               \"/assets/Project.toml\"\nMarkdown.parse(\"\"\"You can also download the\n[manifest]($link_manifest)\nfile and the\n[project]($link_project)\nfile.\n\"\"\")","category":"page"},{"location":"examples/linear_state_space_examples/#Linear-State-Space-Examples","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"","category":"section"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"This tutorial describes the support for linear and linear gaussian state space models.","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"At this point, the package only supports linear time-invariant models without a separate p vector. The canonical form of the linear model is","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"u_n+1 = A u_n + B w_n+1","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"with","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"z_n = C u_n +  v_n","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"and optionally v_n sim N(0 D) and w_n+1 sim N(0I).  If you pass noise into the solver, it no longer needs to be Gaussian. More generally, support could be added for u_n+1 = A(pn) u_n + B(pn) w_n+1 where p is a vector of differentiable parameters, and the A and B are potentially matrix-free operators.","category":"page"},{"location":"examples/linear_state_space_examples/#Simulating-a-Linear-(and-Time-Invariant)-State-Space-Model","page":"Linear State Space Examples","title":"Simulating a Linear (and Time-Invariant) State Space Model","text":"","category":"section"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"Creating a LinearStateSpaceProblem and simulating it for a simple, linear equation.","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"using DifferenceEquations, LinearAlgebra, Distributions, Random, Plots, DataFrames, Zygote\nA = [0.95 6.2;\n     0.0  0.2]\nB = [0.0; 0.01;;] # matrix\nC = [0.09 0.67;\n     1.00 0.00]\nD = [0.1, 0.1] # diagonal observation noise\nu0 = zeros(2)\nT = 10\n\nprob = LinearStateSpaceProblem(A, B, u0, (0, T); C, observables_noise = D, syms = [:a, :b])\nsol = solve(prob)","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"The u vector of the simulated solution can be plotted using the standard recipes, including the use of the optional syms. See the SciML docs for more options.","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"plot(sol)","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"By default, the solution provides an interface to access the simulated u.  That is, sol.u[...] = sol[...],","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"sol[2]","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"Or to get the first element of the last step","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"sol[end][1] #first element of last step","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"Finally, to extract the full vector","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"@show sol[2,:];  # whole second vector","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"The results for all of sol.u can be loaded in a dataframe, where the column names will be the (optionally) provided symbols.","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"df = DataFrame(sol)","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"Other results, such as the simulated noise and observables, can be extracted from the solution","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"sol.z # observables","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"sol.W # Simulated Noise","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"We can also solve the model by passing in fixed noise, which will be useful for joint likelihoods. First, let's extract the noise from the previous solution, then rerun the simulation but with a different initial value","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"noise = sol.W\nu0_2 = [0.1, 0.0]\nprob2 = LinearStateSpaceProblem(A, B, u0_2, (0, T); C, observables_noise = D, syms = [:a, :b], noise)\nsol2 = solve(prob2)\nplot(sol2)","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"To construct an IRF we can take the model and perturb just the first element of the noise,","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"function irf(A, B, C, T = 20)\n    noise = Matrix([1.0; zeros(T-1)]')\n    problem = LinearStateSpaceProblem(A, B, zeros(2), (0, T); C, noise, syms = [:a, :b])\n    return solve(problem)\nend\nplot(irf(A, B, C))","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"Let's find the 2nd observable at the end of the IRF.","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"function last_observable_irf(A, B, C)\n    sol = irf(A, B, C)\n    return sol.z[end][2]  # return 2nd argument of last observable\nend\nlast_observable_irf(A, B, C)","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"But everything in this package is differentiable. Let's differentiate the observable of the IRF with respect to all the parameters using Zygote.jl,","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"gradient(last_observable_irf, A, B, C)  # calculates gradient wrt all arguments","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"Gradients of other model elements (e.g. .u) are also possible. With this in mind, let's find the gradient of the mean of the 1st element of the IRF of the solution with respect to a particular noise vector.","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"function mean_u_1(A, B, C, noise, u0, T)\n    problem = LinearStateSpaceProblem(A, B, u0, (0, T); noise, syms = [:a, :b])\n    sol = solve(problem)\n    u = sol.u # see issue #75 workaround   \n    # can have nontrivial functions and even non-mutating loops \n    return mean( u[i][1] for i in 1:T)\nend\nu0 = [0.0, 0.0]\nnoise = sol.W # from simulation above\nmean_u_1(A, B, C, noise, u0, T)\n# dropping a few arguments from derivative\ngradient((noise, u0)-> mean_u_1(A, B, C, noise, u0, T), noise, u0) ","category":"page"},{"location":"examples/linear_state_space_examples/#Simulating-Ensembles-and-Fixing-Noise","page":"Linear State Space Examples","title":"Simulating Ensembles and Fixing Noise","text":"","category":"section"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"If you pass in a distribution for the initial condition, it will draw an initial condition. Below, we will simulate from a deterministic evolution equation, without any observation noise.","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"using Distributions, DiffEqBase\nu0 = MvNormal([1.0 0.1; 0.1 1.0])  # mean zero initial conditions\nprob = LinearStateSpaceProblem(A, nothing, u0, (0, T); C)\nsol = solve(prob)\nplot(sol)","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"With this, we can simulate an ensemble of solutions from different initial conditions (and we will turn back on the noise). The EnsembleSummary calculates a set of quantiles by default.","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"T = 10\ntrajectories = 50\nprob = LinearStateSpaceProblem(A, B, u0, (0, T); C)\nsol = solve(EnsembleProblem(prob), DirectIteration(), EnsembleThreads(); trajectories)\nsumm = EnsembleSummary(sol)  #calculate summarize statistics from the\nplot(summ)  # shows quantiles by default","category":"page"},{"location":"examples/linear_state_space_examples/#Observables-and-Marginal-Likelihood-using-a-Kalman-Filter","page":"Linear State Space Examples","title":"Observables and Marginal Likelihood using a Kalman Filter","text":"","category":"section"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"If you provide observables and provide a distribution for the observables_noise then the model can provide a calculation of the likelihood.","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"The simplest case is if you use a gaussian prior and have gaussian observation noise. First, let's simulate some data with included observation noise. If passing in a matrix or vector, the observables_noise argument is intended to be the cholesky of the covariance matrix. At this point, only diagonal observation noise is allowed.","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"u0 = MvNormal([1.0 0.1; 0.1 1.0])  # draw from mean zero initial conditions\nT = 10\nprob = LinearStateSpaceProblem(A, B, u0, (0, T); C, observables_noise = D, syms = [:a, :b])\nsol = solve(prob)\nsol.z # simulated observables with observation noise","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"Next, we will find the log likelihood of these simulated observables using u0 as a prior and with the true parameters.","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"The new arguments we pass to the problem creation are u0_prior_variance, u0_prior_mean, and observables. The u0 is ignored for the filtering problem, but must match the size. The KalmanFilter() argument to the solve is unnecessary since it can be selected automatically given the priors and observables.","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"note: Note\nThe timing convention is such that observables are expected to match the predictions starting at the second time period. As the likelihood of the first element u0 comes from a prior, the observables start at the next element, and hence the observables and noise sequences should be 1 less than the tspan.","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"observables = hcat(sol.z...)  # Observables required to be matrix.  Issue #55 \nobservables = observables[:, 2:end] # see note above on likelihood and timing\nnoise = copy(sol.W) # save for later\nu0_prior_mean = [0.0, 0.0]\n# use covariance of distribution we drew from\nu0_prior_var = cov(u0)  \n\nprob = LinearStateSpaceProblem(A, B, u0, (0, size(observables,2)); C, observables, observables_noise = D, syms = [:a, :b], u0_prior_var, u0_prior_mean)\nsol = solve(prob, KalmanFilter())  \n# plot(sol) The `u` is the sequence of posterior means.\nsol.logpdf","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"Hence, the logpdf provides the log likelihood marginalizing out the latent noise variables.","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"As before, we can differentiate the kalman filter itself.","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"function kalman_likelihood(A, B, C, D, u0_prior_mean, u0_prior_var, observables)\n    prob = LinearStateSpaceProblem(A, B, u0, (0, size(observables,2)); C, observables, observables_noise = D, syms = [:a, :b], u0_prior_var, u0_prior_mean)\n    return solve(prob).logpdf  \nend\nkalman_likelihood(A, B, C, D, u0_prior_mean, u0_prior_var, observables)\n# Find the gradient wrt the A, B, C and priors variance.\ngradient((A, B, C, u0_prior_var) -> kalman_likelihood(A, B, C, D, u0_prior_mean, u0_prior_var, observables), A, B, C, u0_prior_var)","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"note: Note\nSome gradients, such as those for observables, have not been implemented, so test carefully. This is a general theme with gradients and Zygote.jl in general. Your best friend in this process is the spectacular ChainRulesTestUtils.jl package. See test_rrule usage in the linear unit tests.","category":"page"},{"location":"examples/linear_state_space_examples/#Joint-Likelihood-with-Noise","page":"Linear State Space Examples","title":"Joint Likelihood with Noise","text":"","category":"section"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"A key application of these methods is to find the joint likelihood of the latent variables (i.e., the noise) and the model definition.","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"The actual calculation of the likelihood is trivial in that case, and just requires iteration of the linear system while accumulating the likelihood given the observation noise.","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"Crucially, the differentiability with respect to the high-dimensional noise vector enables gradient-based sampling and estimation methods that would otherwise be infeasible.","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"function joint_likelihood(A, B, C, D, u0, noise, observables)\n    prob = LinearStateSpaceProblem(A, B, u0, (0, size(observables,2)); C, observables, observables_noise = D, noise)\n    return solve(prob).logpdf\nend\nu0 = [0.0, 0.0]\njoint_likelihood(A, B, C, D, u0, noise, observables)","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"And as always, this can be differentiated with respect to the state-space matrices and the noise. Choosing a few parameters,","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"gradient((A, u0, noise) -> joint_likelihood(A, B, C, D, u0, noise, observables), A, u0, noise)","category":"page"},{"location":"examples/linear_state_space_examples/#Composition-of-State-Space-Models-and-AD","page":"Linear State Space Examples","title":"Composition of State Space Models and AD","text":"","category":"section"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"While the above gradients have been with respect to the full state space objects A, B, etc. those themselves could be generated through a separate procedure and the whole object differentiated. For example, let's repeat the above examples where we generate the A matrix from some sort of deep parameters.","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"First, we will generate some observations with a generate_model proxy, which could be replaced with something more complicated but still differentiable","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"function generate_model(β)\n    A = [β 6.2;\n        0.0  0.2]\n    B = Matrix([0.0  0.001]') # [0.0; 0.001;;] gives a zygote bug\n    C = [0.09 0.67;\n        1.00 0.00]\n    D = [0.01, 0.01]\n    return (;A,B,C,D)\nend\n\nfunction simulate_model(β, u0;T = 200)\n    mod = generate_model(β)\n    prob = LinearStateSpaceProblem(mod.A, mod.B, u0, (0, T); mod.C, observables_noise = mod.D)\n    sol = solve(prob) # simulates\n    observables = hcat(sol.z...)\n    observables = observables[:, 2:end] # see note above on likelihood and timing\n    return observables, sol.W\nend\n\n# Fix a \"pseudo-true\" and generate noise and observables\nβ = 0.95\nu0 = [0.0, 0.0]\nobservables, noise = simulate_model(β, u0)","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"Next, we will evaluate the marginal likelihood using the kalman filter for a particular β value,","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"function kalman_model_likelihood(β, u0_prior_mean, u0_prior_var, observables)\n    mod = generate_model(β) # generate model from structural parameters\n    prob = LinearStateSpaceProblem(mod.A, mod.B, u0, (0, size(observables,2)); mod.C, observables,      observables_noise = mod.D, u0_prior_var, u0_prior_mean)\n    return solve(prob).logpdf\nend\nu0_prior_mean = [0.0, 0.0]\nu0_prior_var = [1e-10 0.0;\n                0.0 1e-10]  # starting with degenerate prior\nkalman_model_likelihood(β, u0_prior_mean, u0_prior_var, observables)","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"Given the observation error, we would not expect the pseudo-true to exactly maximize the log likelihood. To show this, we can optimize it using the Optim package, specifically using a gradient-based optimization routine","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"using Optimization, OptimizationOptimJL\n# Create a function to minimize only of β and use Zygote based gradients\nkalman_objective(β,p) = -kalman_model_likelihood(β, u0_prior_mean, u0_prior_var, observables)\nkalman_objective(0.95, nothing)\ngradient(β ->kalman_objective(β, nothing),β) # Verifying it can be differentiated\n\n\noptf = OptimizationFunction(kalman_objective, Optimization.AutoZygote())\nβ0 = [0.91] # start off of the pseudotrue\noptprob = OptimizationProblem(optf, β0)\noptsol = solve(optprob,LBFGS())  # reverse-mode AD is overkill here","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"In this way, this package composes with others such as DifferentiableStateSpaceModels.jl which takes a set of structural parameters and an expected difference equation to generate a state-space model.","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"Similarly, we can find the joint likelihood for a particular β value and noise. Here we will add in prior. Some form of prior or regularization is generally necessary for these sorts of nonlinear models.","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"function joint_model_posterior(β, u0, noise, observables, noise_prior, β_prior)\n    mod = generate_model(β) # generate model from structural parameters\n    prob = LinearStateSpaceProblem(mod.A, mod.B, u0, (0, size(observables,2)); mod.C, observables,      observables_noise = mod.D, noise)\n    return solve(prob).logpdf + sum(logpdf.(noise_prior, noise)) + logpdf(β_prior, β) # posterior\nend\nu0 = [0.0, 0.0]\nnoise_prior = Normal(0.0, 1.0)\nβ_prior = Normal(β, 0.03) # prior local to the true value\njoint_model_posterior(β, u0, noise, observables, noise_prior, β_prior)","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"Which we can turn into a differentiable objective by adding in a prior on the noise","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"joint_model_objective(x, p) = -joint_model_posterior(x[1], u0, Matrix(x[2:end]'), observables, noise_prior, β_prior) # extract noise and parameeter from vector\nx0 = vcat([0.95], noise[1,:])  # starting at the true noise\njoint_model_objective(x0, nothing)\ngradient(x ->joint_model_objective(x, nothing),x0) # Verifying it can be differentiated\n\n# optimize\noptf = OptimizationFunction(joint_model_objective, Optimization.AutoZygote())\noptprob = OptimizationProblem(optf, x0)\noptsol = solve(optprob,LBFGS())","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"This \"solves\" the problem relatively quickly, despite the high-dimensionality. However, from a statistics perspective note that this last optimization process does not do especially well in recovering the pseudotrue if you increase the prior variance on the β parameter. Maximizing the posterior is usually the wrong thing to do in high-dimensions because the mode is not a typical set.","category":"page"},{"location":"examples/linear_state_space_examples/#Caveats-on-Gradients-and-Performance","page":"Linear State Space Examples","title":"Caveats on Gradients and Performance","text":"","category":"section"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"A few notes on performance and gradients:","category":"page"},{"location":"examples/linear_state_space_examples/","page":"Linear State Space Examples","title":"Linear State Space Examples","text":"As this is using reverse-mode AD it will be efficient for fairly large systems as long as the ultimate value of your differentiable program. With a little extra work and unit tests, it could support structured matrices/etc. as well.\nGetting to much higher scales, where the A,B,C,D are so large that matrix-free operators are necessary, is feasible but will require generalizing those to LinearOperators. This would be reasonably easy for joint likelihood and feasible but possible for the Kalman filter.\nAt this point, there is no support for forward-mode auto-differentiation. For smaller systems with a kalman filter, this should dominate the alternatives, and efficient forward-mode AD rules for the kalman filter exist (see the supplementary materials in the Differentiable State Space Models paper). However, it would be a significant amount of work to add end-to-end support and fulfill standard SciML interfaces, and perhaps waiting for Enzyme or similar AD systems that provide both forward/reverse/mixed mode makes sense.\nForward-mode AD is likely inappropriate for the joint-likelihood based models, since the dimensionality of the noise is always large.\nThe gradient rules are written using ChainRules.jl so in theory they will work with any supporting AD. In practice, though, Zygote is the most tested, and other systems have inconsistent support for Julia at this time.","category":"page"}]
}
